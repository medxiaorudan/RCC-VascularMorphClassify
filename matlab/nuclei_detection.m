clear all;
close all;
clc;

% Ignoring the 'image is too big to fit on screen' warning not to be
% flooded.
warning off images:initSize:adjustingMag 

[pathstr, name, ext] = fileparts(pwd());
addpath(genpath(pathstr)) %add all subdirectories of "motimo" folder

% Loading the test image

% path to image
% main_histo_data = 'C:\Users\Rita Simoes\Documents\Data\histo_kidney\Lame virtuelle\10.08.2014';
main_histo_data = '../10.08.2014';
% case_folder = [main_histo_data,'/hp14.1993']; % ccrcc
% case_folder = [main_histo_data,'/hp14.5347']; % ccrcc greff√©
% case_folder = [main_histo_data,'/hp14.64']; % ccrcc meta
case_folder = [main_histo_data,'/hp14.1749']; % ?
% case_folder = [main_histo_data,'/hp10.9650_1']; % pap
% case_folder = [main_histo_data,'/hp10.9650_2']; % pap
% case_folder = [main_histo_data,'/hp14.9700_1';]; % pap
% case_folder = [main_histo_data,'/hp14.9700_2';]; % pap
% case_folder = [main_histo_data,'/ha13.3003']; % ?
% case_folder = [main_histo_data,'/hp14.5794';]; % biopsy
% case_folder = [main_histo_data,'/hp14.5794_2';]; % biopsy
% case_folder = [main_histo_data,'/hp14.5794_3';]; % biopsy
% case_folder = [main_histo_data,'/hp14.5794_4';]; % biopsy

level = 0;
display_images = true;

%%

%% Testing Hough
test_hough = false;
hough_input = 'nuclei_centroids';
% Options:
% 'nuclei_centroids'
% 'nuclei_segmentation'
% 'canny'

% parameters according to image resolution
switch level % assumes that the gaussian pyramid has been generated by the python script "image_pyramid.py"
    case 0
        path_image = [case_folder,'/level0_crop.png'];
        %         path_image = [case_folder,'/level0.png'];
        neigh_size = 5; % size of the neighborhood for the filters
        small_obj = 5; % size of the small objects that should be removed from binary segmentations( "noise")
        sigmas_hess = 20:40; % sigmas used by the gaussian derivatives (around the size of the nuclei)
        % to compute the pixelswise hessian matrices
        sigmas_frangi = [10 40]; % same as above; the sigmas should be around the width of the vessels
    case 0.5
        path_image = [case_folder,'/level0.5_crop_gaupyr.png'];
        neigh_size = 3;
        small_obj = 10;
        sigmas_hess = 5:10;
        sigmas_frangi = [4 20];
    case 1
        path_image = [case_folder,'/level1.0_crop_gaupyr.png']; %or level1_crop_leica
        neigh_size = 3;
        small_obj = 5;
        sigmas_hess = 2:8;
        sigmas_frangi = [2 10];
end


path_image = '../10.08.2014/11_40_47/subimages/level0_crop_x4_y16.png';

img = im2double(imread(path_image)); % load image
% img = flipdim(flipdim(img,1),2); % flip dims to match the Leica viewer
% img = img(1:floor(end/2), 1:floor(end/2), :);

img1 = rescale01(img(:,:,1));
img2 = rescale01(img(:,:,2));
img3 = rescale01(img(:,:,3));
img = cat(3,img1,img2,img3);

% make some channel combinations
img_mean = mean(img,3); img_mean = rescale01(img_mean);
img_min = min(img1, min(img2, img3)); img_min = rescale01(img_min);
img_max = max(img1, max(img2, img3)); img_max = rescale01(img_max);

figure, imshow(img);
%% Normalized-blue image
im_bn = imadjust(normalized_blue_image( img ));
figure, imshow(im_bn), title('Normalized-blue image');
%% Brown image 
im_brown = imadjust(brown_image( img ));
figure, imshow(im_brown), title('Brown image');

[ im_c1, im_c2, im_c3 ] = invariant_colors( img );
im_c1 = imadjust(im_c1);
im_c2 = imadjust(im_c2);
im_c3 = imadjust(im_c3);
figure, imshow(im_c1), title('C1');
figure, imshow(im_c2), title('C2');
figure, imshow(im_c3), title('C3');

[ im_h ] = 1 - image_h( img );
% figure, imhist(im_h);
% figure, imshow(im_h), title('Hematoxylin');
im_h = imadjust(im_h);
figure, imhist(im_h);

figure, imshow(im_h), title('Hematoxylin');

[ im_dab ] = image_dab( img );
im_dab = imadjust(im_dab);
figure, imshow(im_dab), title('DAB');

[ im_e ] = image_e( img );
im_e = imadjust(im_e);
figure, imhist(im_e);
figure, imshow(im_e), title('Eosin');

% [ im_pca1, im_pca2, im_pca3 ] = image_pixelwise_pca( img );
% figure, imshow(rescale01(im_pca1)), title('PCA 1');
% figure, imshow(rescale01(im_pca2)), title('PCA 2');
% figure, imshow(rescale01(im_pca3)), title('PCA 3');

% close all;
% nuclei = im_h < 0.1;
% figure, imshow(nuclei), title('nuclei threshold');
% ov2 = overlay_binary(img,nuclei,false);
% figure, imshow(ov2), title('nuclei final - RGB');
%
% small_obj = 5;
% se = strel('disk', small_obj);rien
% nuclei_RGB = imclose(nuclei,ones(5));
% nuclei_RGB = imopen(nuclei,ones(5));
% nuclei_RGB = imfill(nuclei_RGB,'holes');
% nuclei_RGB = imopen(nuclei_RGB,se);
% nuclei_RGB = imdilate(nuclei_RGB,ones(3,3));
% ov3 = overlay_binary(img,nuclei_RGB,true);
% figure, imshow(ov3), title('nuclei final - RGB')

se = strel('disk', 5);

% Image to work on (here, the image which shows the best contrasted
% nuclei).
% chosen_image = 1 - im_c1;
chosen_image = im_h;

% level_otsu = graythresh(chosen_image);

% im_h_otsu = im_h > level_otsu;
% figure, imshow(im_h_otsu), title('otsu');
open_img = imopen(chosen_image, se);

ball = open_img > 0.6;
% ball = open_img > level_otsu;
% [ball, ~] = bwlabeln(ball, 8);

% ball = (ball > 0);
se_close = strel('disk', 3);
ball = imclose(ball, se_close);

ov3 = overlay_binary(img,ball,true);
figure, imshow(ov3), title('nuclei final - RGB')

cc = bwconncomp(ball, 4);
graindata = regionprops(cc,'basic');
grain_areas = [graindata.Area]; 
% figure, hist(grain_areas,20);

small_cc = bwareaopen(ball, 1500);
figure, imshow(small_cc);

% Ilabel = logical(ball);
% stat = regionprops(Ilabel,'centroid');
% figure,
% imshow(img); hold on;
% for x = 1: numel(stat)
%     plot(stat(x).Centroid(1),stat(x).Centroid(2),'g.');
% end
%
% nb_nuclei = numel(stat);
% list_nuclei = zeros(nb_nuclei, 2);
% for i_nuclei = 1:nb_nuclei
%     list_nuclei(i_nuclei, :) = [stat(i_nuclei).Centroid(1) stat(i_nuclei).Centroid(2)];
% end
%
% % rescaling the data so it fits between 0 and 1 (required for the point
% % alignment routine
% max_i = max(list_nuclei(:, 1));
% max_j = max(list_nuclei(:, 2));
% list_nuclei(:, 1) = list_nuclei(:, 1)/max_i;
% list_nuclei(:, 2) = list_nuclei(:, 2)/max_j;

% csvwrite('list_nuclei.dat', list_nuclei);

%% Testing Hough transform on the segmented image
if test_hough
    
    %% Canny edge detector
    
    switch hough_input
        case 'canny'
            
            bw_hough = edge(chosen_image,'canny');
            figumore, imshow(bw_hough);
            
        case 'nuclei_centroids'
            bw_hough = zeros(size(ball));
            nb_nuclei = numel(stat);
            for i_nuclei = 1:nb_nuclei
                bw_hough(floor(stat(i_nuclei).Centroid(1)), floor(stat(i_nuclei).Centroid(2))) = 1;
            end
            
        case 'nuclei_segmentation'
            bw_hough = ball;
            
        otherwise
            bw_hough = chosen_image;
            
    end
    
    [H,theta,rho] = hough(bw_hough);
    
    figure, imshow(imadjust(mat2gray(H)),[],'XData',theta,'YData',rho,...
        'InitialMagnification','fit');
    xlabel('\theta (degrees)'), ylabel('\rho');
    axis on, axis normal, hold on;
    colormap(hot)
    
    P = houghpeaks(H,50,'threshold',ceil(0.3*max(H(:))));
    
    x = theta(P(:,2));
    y = rho(P(:,1));
    plot(x,y,'s','color','black');
    
    lines = houghlines(bw_hough,theta,rho,P,'FillGap',150,'MinLength',150);
    
    figure, imshow(ov3), hold on
    max_len = 0;
    for k = 1:length(lines)
        xy = [lines(k).point1; lines(k).point2];
        plot(xy(:,1),xy(:,2),'LineWidth',2,'Color','black');
        
        % Plot beginnings and ends of lines
        plot(xy(1,1),xy(1,2),'x','LineWidth',2,'Color','yellow');
        plot(xy(2,1),xy(2,2),'x','LineWidth',2,'Color','red');
        
        % Determine the endpoints of the longest line segment
        len = norm(lines(k).point1 - lines(k).point2);
        if ( len > max_len )
            max_len = len;
            xy_long = xy;
        end
    end
    
    % highlight the longest line segment
    plot(xy_long(:,1),xy_long(:,2),'LineWidth',2,'Color','red');

end